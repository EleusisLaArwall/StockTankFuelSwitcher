// Eleusis La Arwall
// Modular Storage Setups for entire series of tanks (with MM & PM)

// 1.) Generate variables
//  - For resource amounts and mass. Must be loaded before the rest (010)
@PART[*]:HAS[#stockLFO[true],#primarySwitcher[*],@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer],!MODULE[ModuleTankManager],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleB9PartSwitch],!MODULE[ModuleEnginesFX],!MODULE[ModuleEngines]]:NEEDS[!ModularFuelTanks&!RealFuels]:FOR[zzSTFS010VAR]{
//	VOLUME
	%STgetLF = #$RESOURCE[LiquidFuel]/maxAmount$
	%STgetOX = #$RESOURCE[Oxidizer]/maxAmount$
	%STV5 = #$STgetLF$
	@STV5 += #$STgetOX$		// STV5 equals the total tank volume for 5FU/L resources (most stock resources)
	%STV1 = #$STV5$
	@STV1 *= 5			// STV1 is multiplied by 5 for resources with 1 FU per Liter (CRP resources)
//	%KDV1H = #$KDV1$
//	@KDV1H *= 0.5			// KDV1 is diveded by 2 for two resources in one tank-setup at the same time
	%STVLF = #$STV5$
	@STVLF *= 0.45
	%STVOX = #$STV5$
	@STVOX *= 0.55
	%STVXG = #$STV5$
	@STVXG *= 50
	%STVHLOxH = #$STV1$		// HydroLOx
	@STVHLOxH *= 0.8
	%STVHLOxO = #$STV1$
	@STVHLOxO -= #$STVHLOxH$
	%STVHOxiH = #$STV1$		// HydroOxi
	@STVHOxiH *= 0.9375
	%STVHOxiO = #$STV1$
	@STVHOxiO -= #$STVHOxiH$
	%STVMLOxM = #$STV1$		// MethaLOx
	@STVMLOxM *= 0.557
	%STVMLOxO = #$STV1$
	@STVMLOxO -= #$STVMLOxM$
//	COST
	%STCLFOL = #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$
	@STCLFOL *= #$STVLF$
	%STCLFOO = #$@RESOURCE_DEFINITION[Oxidizer]/unitCost$
	@STCLFOO *= #$STVOX$
	%STCLFO = #$STCLFOL$
	@STCLFO += #$STCLFOO$
//	MASS
	@mass = #$STV5$
	@mass *= 0.000625		// =*0.01*0.125*0.5; Density(Ore)*1/8*0.5
}
//  - For tank cost by resource if ONLY Firespitter is available. Load directly after standard variables (011)
@PART[*]:HAS[#stockLFO[true],#primarySwitcher[FSfuelSwitch],]:NEEDS[Firespitter&!ModularFuelTanks&!RealFuels]:AFTER[zzSTFS010VAR]{
	%STCLF = #$@RESOURCE_DEFINITION[LiquidFuel]/unitCost$
	@STCLF *= #$STV5$
	%STCMP = #$@RESOURCE_DEFINITION[MonoPropellant]/unitCost$
	@STCMP *= #$STV5$
	%STCXG = #$@RESOURCE_DEFINITION[XenonGas]/unitCost$
	@STCXG *= #$STVXG$
	%STCHLOxH = #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	@STCHLOxH *= #$STVHLOxH$
	%STCHLOxO = #$@RESOURCE_DEFINITION[LqdOxygen]/unitCost$
	@STCHLOxO *= #$STVHLOxO$
	%STCHLOx = #$STCHLOxH$
	@STCHLOx += #$STCHLOxO$		// Total cost for HydroLOx
	%STCHOxiH = #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	@STCHOxiH *= #$STVHOxiH$
	%STCHOxiO = #$@RESOURCE_DEFINITION[Oxidizer]/unitCost$
	@STCHOxiO *= #$STVHOxiO$
	%STCHOxi = #$STCHOxiH$
	@STCHOxi += #$STCHOxiO$		// Total cost for HydroOxi
	%STCLH2 = #$@RESOURCE_DEFINITION[LqdHydrogen]/unitCost$
	@STCLH2 *= #$STV1$
	%STCMLOxM = #$@RESOURCE_DEFINITION[LqdMethane]/unitCost$
	@STCMLOxM *= #$STVMLOxM$
	%STCMLOxO = #$@RESOURCE_DEFINITION[LqdOxygen]/unitCost$
	@STCMLOxO *= #$STVMLOxO$
	%STCMLOx = #$STCMLOxM$
	@STCMLOx += #$STCMLOxO$		// Total cost for MethaLOx
	%STCLMe = #$@RESOURCE_DEFINITION[LqdMethane]/unitCost$
	@STCLMe *= #$STV1$
	%STCLAr = #$@RESOURCE_DEFINITION[LqdArgon]/unitCost$
	@STCLAr *= #$STV1$
	%STCLN2 = #$@RESOURCE_DEFINITION[LqdNitrogen]/unitCost$
	@STCLN2 *= #$STV1$
}

// 2.) Apply the basic fuel-switch setup. Only one of them will be loaded so all are the same order (015)
//  - Interstellar Fuel Switch setup
@PART[*]:HAS[#stockLFO[true],#primarySwitcher[InterstellarFuelSwitch],!MODULE[ModuleTankManager],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleB9PartSwitch],!MODULE[ModuleKerbetrotterResourceSwitch],!MODULE[WBIConvertibleStorage],!MODULE[WBIResourceSwitcher]]:NEEDS[InterstellarFuelSwitch]:FOR[zzSTFS015]{
	@cost -= #$STCLFO$
	MODULE
	{
		name = InterstellarFuelSwitch
		moduleID = STFSfuelSwitch
		resourceGUI = LFO
		resourceNames = LiquidFuel,Oxidizer
		resourceAmounts = #$../STVLF$,$../STVOX$
		tankMass = 0
		basePartMass = #$../mass$
		displayCurrentTankCost = true
		hasGUI = False
	}
}
//  - B9 Part Switcher setup
@PART[*]:HAS[#stockLFO[true],#primarySwitcher[B9PartSwitch],!MODULE[ModuleTankManager],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleB9PartSwitch],!MODULE[ModuleKerbetrotterResourceSwitch],!MODULE[WBIConvertibleStorage],!MODULE[WBIResourceSwitcher]]:NEEDS[B9PartSwitch]:FOR[zzSTFS015]{
	@cost -= #$STCLFO$
	MODULE
	{
		name = ModuleB9PartSwitch
		moduleID = STFSfuelSwitch
		switcherDescription = Tank Type
		baseVolume = #$../STV5$
		SUBTYPE
		{
			name = LFO
			tankType = STFSLFO
//			addedMass = #$../../mass$
		}
	}
}
//  - Firespitter setup
@PART[*]:HAS[#stockLFO[true],#primarySwitcher[FSfuelSwitch],!MODULE[ModuleTankManager],!MODULE[InterstellarFuelSwitch],!MODULE[FSfuelSwitch],!MODULE[ModuleB9PartSwitch],!MODULE[ModuleKerbetrotterResourceSwitch],!MODULE[WBIConvertibleStorage],!MODULE[WBIResourceSwitcher]]:NEEDS[Firespitter]:FOR[zzSTFS015]{
	@cost -= #$STCLFO$
	MODULE
	{
		name = FSfuelSwitch
		moduleID = STFSfuelSwitch
		resourceNames = LiquidFuel,Oxidizer
		resourceAmounts = #$../STVLF$,$../STVOX$
		tankCost = #$../STCLFO$
		tankMass = 0
		basePartMass = #$../mass$
		displayCurrentTankCost = true
	}
}

// Cleaning up
@PART[*]:HAS[#stockLFO[true],#primarySwitcher[*],!MODULE[ModuleTankManager]]:NEEDS[!ModularFuelTanks&!RealFuels]:Final{
	!STget* = 0
	!STV* = 0
	!STC* = 0
	!stockLFO = true
	!primarySwitcher = none
	!RESOURCE[LiquidFuel]{}
	!RESOURCE[Oxidizer]{}
}